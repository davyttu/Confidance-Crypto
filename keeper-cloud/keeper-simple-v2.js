require("dotenv").config();
const { ethers } = require("ethers");
const { createClient } = require('@supabase/supabase-js');

// Configuration
const RPC_URL = process.env.RPC_URL || process.env.BASE_RPC || "https://mainnet.base.org";
const CHECK_INTERVAL = 60000; // 60 secondes

console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
console.log("ü§ñ CONFIDANCE CRYPTO KEEPER V2");
console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
console.log("üåê Network: Base Mainnet");
console.log(`‚è∞ Check interval: ${CHECK_INTERVAL / 1000}s`);
console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

// Initialiser provider et wallet
const provider = new ethers.JsonRpcProvider(RPC_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

console.log("üë§ Keeper address:", wallet.address);

// Supabase client
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// ABI pour ScheduledPayment V2
const SCHEDULED_PAYMENT_ABI = [
  "function releaseTime() view returns (uint256)",
  "function released() view returns (bool)",
  "function cancelled() view returns (bool)",
  "function release() external",
  "function getAmounts() view returns (uint256 amountToPayee, uint256 protocolFee, uint256 totalLocked)"
];

// Liste des contrats √† surveiller
let contractsToWatch = [];

// Charger les contrats depuis Supabase
async function loadContracts() {
  try {
    const { data, error } = await supabase
      .from('scheduled_payments')
      .select('*')
      .eq('status', 'pending')
      .order('release_time', { ascending: true });

    if (error) throw error;

    contractsToWatch = data.map(payment => ({
      address: payment.contract_address,
      releaseTime: payment.release_time,
      name: `Payment ${new Date(payment.release_time * 1000).toLocaleString()}`,
      id: payment.id
    }));

    console.log(`üìã ${contractsToWatch.length} paiement(s) charg√©(s)\n`);
  } catch (error) {
    console.error("‚ùå Erreur chargement Supabase:", error.message);
  }
}

// Mettre √† jour le statut dans Supabase
async function updatePaymentStatus(paymentId, txHash) {
  try {
    const { error } = await supabase
      .from('scheduled_payments')
      .update({
        status: 'released',
        tx_hash: txHash,
        released_at: new Date().toISOString()
      })
      .eq('id', paymentId);

    if (error) throw error;
    console.log(`‚úÖ Statut mis √† jour dans Supabase`);
  } catch (error) {
    console.error(`‚ùå Erreur mise √† jour Supabase:`, error.message);
  }
}

// Fonction principale de v√©rification
async function checkAndRelease() {
  const now = Math.floor(Date.now() / 1000);
  console.log(`‚è∞ [${new Date().toLocaleTimeString()}] V√©rification...`);

  // Recharger les contrats depuis Supabase
  await loadContracts();

  if (contractsToWatch.length === 0) {
    console.log("üò¥ Aucun paiement √† surveiller\n");
    return;
  }

  for (const contract of contractsToWatch) {
    try {
      const payment = new ethers.Contract(
        contract.address,
        SCHEDULED_PAYMENT_ABI,
        wallet
      );

      // V√©rifier le statut
      const released = await payment.released();
      const cancelled = await payment.cancelled();

      if (released) {
        console.log(`‚úÖ ${contract.name}: D√©j√† lib√©r√©`);
        // Mettre √† jour Supabase si pas d√©j√† fait
        await updatePaymentStatus(contract.id, 'already_released');
        continue;
      }

      if (cancelled) {
        console.log(`‚ùå ${contract.name}: Annul√©`);
        continue;
      }

      // V√©rifier le temps
      const releaseTime = await payment.releaseTime();
      const timeUntil = Number(releaseTime) - now;

      if (timeUntil > 0) {
        const minutes = Math.floor(timeUntil / 60);
        const seconds = timeUntil % 60;
        console.log(`‚è±Ô∏è  ${contract.name}: Encore ${minutes}m ${seconds}s`);
        continue;
      }

      // C'est l'heure ! Ex√©cuter release()
      console.log(`\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
      console.log(`üéØ ${contract.name}: PR√äT √Ä LIB√âRER !`);
      console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);

      // Afficher les montants avant release
      try {
        const [amountToPayee, protocolFee, totalLocked] = await payment.getAmounts();
        console.log(`üí∞ Montants :`);
        console.log(`   B√©n√©ficiaire : ${ethers.formatEther(amountToPayee)} ETH`);
        console.log(`   Protocole : ${ethers.formatEther(protocolFee)} ETH`);
        console.log(`   Total : ${ethers.formatEther(totalLocked)} ETH`);
      } catch (e) {
        console.log(`‚ö†Ô∏è  Impossible de lire les montants (contrat V1 ?)`);
      }

      console.log(`\nüí∏ Ex√©cution de release()...`);
      
      const tx = await payment.release();
      console.log(`üì§ Transaction envoy√©e: ${tx.hash}`);
      
      const receipt = await tx.wait();
      console.log(`‚úÖ SUCC√àS ! Block: ${receipt.blockNumber}`);
      console.log(`üîó https://basescan.org/tx/${tx.hash}`);
      console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`);

      // Mettre √† jour Supabase
      await updatePaymentStatus(contract.id, tx.hash);

    } catch (error) {
      if (error.message.includes("Already released")) {
        console.log(`‚úÖ ${contract.name}: D√©j√† lib√©r√©`);
      } else if (error.message.includes("Too early")) {
        console.log(`‚è±Ô∏è  ${contract.name}: Pas encore l'heure`);
      } else {
        console.error(`‚ùå ${contract.name}: Erreur:`, error.message);
      }
    }
  }
  console.log(); // Ligne vide
}

// Health check
async function healthCheck() {
  try {
    const balance = await provider.getBalance(wallet.address);
    console.log(`üí∞ Balance keeper: ${ethers.formatEther(balance)} ETH`);
    
    if (balance === 0n) {
      console.warn("‚ö†Ô∏è  ATTENTION: Balance √† 0 !");
    }
  } catch (error) {
    console.error("‚ùå Health check failed:", error.message);
  }
}

// D√©marrage
async function start() {
  console.log("üöÄ D√©marrage du Keeper...\n");
  
  // Health check initial
  await healthCheck();
  console.log();
  
  // Premi√®re v√©rification imm√©diate
  await checkAndRelease();
  
  // Puis v√©rifications p√©riodiques
  setInterval(checkAndRelease, CHECK_INTERVAL);
  
  // Health check toutes les 5 minutes
  setInterval(healthCheck, 5 * 60 * 1000);
  
  console.log("‚úÖ Keeper op√©rationnel ! Surveillance active...\n");
}

// Gestion des erreurs
process.on("unhandledRejection", (error) => {
  console.error("‚ùå Unhandled rejection:", error);
});

process.on("SIGTERM", () => {
  console.log("‚ö†Ô∏è  SIGTERM re√ßu, arr√™t gracieux...");
  process.exit(0);
});

// Lancer !
start().catch(console.error);