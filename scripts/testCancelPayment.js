const hre = require("hardhat");

async function main() {
  console.log("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
  console.log("üß™ TEST COMPLET - ANNULATION DE PAIEMENT");
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

  const [deployer] = await hre.ethers.getSigners();
  const beneficiary = "0x8CC0D8f899b0eF553459Aac249b14A95F0470cE9";
  const amount = hre.ethers.parseEther("0.0001"); // 0.0001 ETH pour test
  const now = Math.floor(Date.now() / 1000);
  const releaseTime = now + 300; // 5 minutes

  // Balance initiale
  const initialBalance = await hre.ethers.provider.getBalance(deployer.address);
  console.log("üí∞ Balance initiale :", hre.ethers.formatEther(initialBalance), "ETH\n");

  // 1. D√©ployer un paiement ANNULABLE
  console.log("üì¶ D√©ploiement d'un paiement ANNULABLE...");
  const ScheduledPayment = await hre.ethers.getContractFactory("ScheduledPayment");
  const payment = await ScheduledPayment.deploy(
    beneficiary,
    releaseTime,
    true,  // cancellable = true
    { value: amount }
  );
  await payment.waitForDeployment();
  const paymentAddress = await payment.getAddress();
  console.log("‚úÖ Contrat d√©ploy√© √† :", paymentAddress);
  console.log("   Montant : 0.0001 ETH");
  console.log("   Type : ANNULABLE ‚úÖ\n");

  // 2. V√©rifier le status
  console.log("üîç V√©rification du status initial...");
  const status = await payment.getStatus();
  console.log(`   Released : ${status.isReleased}`);
  console.log(`   Cancelled : ${status.isCancelled}`);
  console.log(`   Cancellable : ${status.isCancellable}`);
  console.log(`   Peut √™tre annul√© : ${status.canBeCancelled} ‚úÖ\n`);

  // 3. Balance apr√®s d√©ploiement
  const afterDeployBalance = await hre.ethers.provider.getBalance(deployer.address);
  console.log("üí∞ Balance apr√®s d√©ploiement :", hre.ethers.formatEther(afterDeployBalance), "ETH");
  const spentOnDeploy = initialBalance - afterDeployBalance;
  console.log(`   D√©pens√© : ${hre.ethers.formatEther(spentOnDeploy)} ETH (contrat + gas)\n`);

  // 4. Attendre 2 secondes (pour simuler)
  console.log("‚è∞ Attente de 2 secondes...\n");
  await new Promise(resolve => setTimeout(resolve, 2000));

  // 5. ANNULER le paiement
  console.log("‚ùå Annulation du paiement...");
  const cancelTx = await payment.cancel();
  const cancelReceipt = await cancelTx.wait();
  console.log("‚úÖ Paiement annul√© !");
  console.log(`   Transaction : ${cancelTx.hash}`);
  console.log(`   Gas utilis√© : ${cancelReceipt.gasUsed.toString()}\n`);

  // 6. V√©rifier le nouveau status
  console.log("üîç V√©rification du status apr√®s annulation...");
  const newStatus = await payment.getStatus();
  console.log(`   Released : ${newStatus.isReleased}`);
  console.log(`   Cancelled : ${newStatus.isCancelled} ‚úÖ`);
  console.log(`   Peut √™tre annul√© : ${newStatus.canBeCancelled} (plus possible)\n`);

  // 7. Balance finale
  const finalBalance = await hre.ethers.provider.getBalance(deployer.address);
  console.log("üí∞ Balance finale :", hre.ethers.formatEther(finalBalance), "ETH");
  
  const totalSpent = initialBalance - finalBalance;
  
  console.log("\nüìä R√âSUM√â DES CO√õTS :");
  console.log(`   Total d√©pens√© en gas : ${hre.ethers.formatEther(totalSpent)} ETH`);
  console.log(`   Montant rembours√© : ${hre.ethers.formatEther(amount)} ETH (100%)`);
  console.log(`   Fees protocole : 0 ETH ‚úÖ (0% car annul√©)`);

  // 8. Essayer de release (devrait √©chouer)
  console.log("\nüß™ Test : Essayer de release un paiement annul√©...");
  try {
    await payment.release();
    console.log("‚ùå ERREUR : Le release n'aurait pas d√ª fonctionner !");
  } catch (error) {
    console.log("‚úÖ Correct ! Le release a bien √©t√© rejet√©");
    console.log(`   Raison : Payment was cancelled\n`);
  }

  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
  console.log("‚úÖ TEST D'ANNULATION R√âUSSI !");
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
  console.log("\nüí° Points valid√©s :");
  console.log("   ‚úÖ D√©ploiement d'un paiement annulable");
  console.log("   ‚úÖ Annulation avant √©ch√©ance");
  console.log("   ‚úÖ Remboursement int√©gral (100%)");
  console.log("   ‚úÖ Aucune fee pr√©lev√©e");
  console.log("   ‚úÖ Impossible de release apr√®s annulation\n");
}

main().catch((error) => {
  console.error("\n‚ùå Erreur :", error);
  process.exitCode = 1;
});