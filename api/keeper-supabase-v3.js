require("dotenv").config();
const { ethers } = require("ethers");
const { createClient } = require("@supabase/supabase-js");

// Configuration
const RPC_URL = process.env.RPC_URL || process.env.BASE_RPC || "https://mainnet.base.org";
const CHECK_INTERVAL = 30000; // 30 secondes (plus fr√©quent)
const API_URL = process.env.API_URL || "http://localhost:3001";

console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
console.log("ü§ñ CONFIDANCE CRYPTO KEEPER V3");
console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
console.log("üåê Network: Base Mainnet");
console.log(`‚è∞ Check interval: ${CHECK_INTERVAL / 1000}s`);
console.log(`üîó API URL: ${API_URL}`);
console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

// Initialiser provider et wallet
const provider = new ethers.JsonRpcProvider(RPC_URL);
const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

console.log("üë§ Keeper address:", wallet.address);

// ABI pour ScheduledPayment V2
const SCHEDULED_PAYMENT_ABI = [
  "function releaseTime() view returns (uint256)",
  "function released() view returns (bool)",
  "function cancelled() view returns (bool)",
  "function release() external",
  "function getAmounts() view returns (uint256 amountToPayee, uint256 protocolFee, uint256 totalLocked)"
];

// Fonction pour r√©cup√©rer les paiements depuis l'API
async function fetchReadyPayments() {
  try {
    const response = await fetch(`${API_URL}/api/payments/ready`);
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    return data.payments || [];
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration paiements:", error.message);
    return [];
  }
}

// Fonction pour mettre √† jour le statut d'un paiement
async function updatePaymentStatus(paymentId, status, executionTxHash = null) {
  try {
    const response = await fetch(`${API_URL}/api/payments/${paymentId}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        status,
        executed_at: new Date().toISOString(),
        execution_tx_hash: executionTxHash
      })
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    console.log(`‚úÖ Statut mis √† jour: ${paymentId} ‚Üí ${status}`);
  } catch (error) {
    console.error("‚ùå Erreur mise √† jour statut:", error.message);
  }
}

// Fonction principale de v√©rification
async function checkAndRelease() {
  const now = Math.floor(Date.now() / 1000);
  console.log(`‚è∞ [${new Date().toLocaleTimeString()}] V√©rification des paiements...`);

  try {
    // R√©cup√©rer les paiements pr√™ts depuis l'API
    const readyPayments = await fetchReadyPayments();
    
    if (readyPayments.length === 0) {
      console.log("üò¥ Aucun paiement pr√™t √† ex√©cuter\n");
      return;
    }

    console.log(`üìã ${readyPayments.length} paiement(s) pr√™t(s) √† ex√©cuter`);

    for (const payment of readyPayments) {
      try {
        console.log(`\nüîç V√©rification: ${payment.contract_address}`);
        
        const contract = new ethers.Contract(
          payment.contract_address,
          SCHEDULED_PAYMENT_ABI,
          wallet
        );

        // V√©rifier le statut
        const released = await contract.released();
        const cancelled = await contract.cancelled();

        if (released) {
          console.log(`‚úÖ D√©j√† lib√©r√© - Mise √† jour du statut`);
          await updatePaymentStatus(payment.id, 'executed');
          continue;
        }

        if (cancelled) {
          console.log(`‚ùå Annul√© - Mise √† jour du statut`);
          await updatePaymentStatus(payment.id, 'cancelled');
          continue;
        }

        // V√©rifier le temps
        const releaseTime = await contract.releaseTime();
        const timeUntil = Number(releaseTime) - now;

        if (timeUntil > 0) {
          const minutes = Math.floor(timeUntil / 60);
          const seconds = timeUntil % 60;
          console.log(`‚è±Ô∏è  Encore ${minutes}m ${seconds}s`);
          continue;
        }

        // C'est l'heure ! Ex√©cuter release()
        console.log(`\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
        console.log(`üéØ PR√äT √Ä LIB√âRER !`);
        console.log(`üìã ID: ${payment.id}`);
        console.log(`üè† Contrat: ${payment.contract_address}`);
        console.log(`üë§ Payeur: ${payment.payer}`);
        console.log(`üë§ B√©n√©ficiaire: ${payment.payee}`);
        console.log(`üí∞ Montant: ${payment.amount} ${payment.currency}`);
        console.log(`‚è∞ Date pr√©vue: ${new Date(payment.release_time * 1000).toLocaleString()}`);
        console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);

        // Afficher les montants avant release
        try {
          const [amountToPayee, protocolFee, totalLocked] = await contract.getAmounts();
          console.log(`üí∞ Montants :`);
          console.log(`   B√©n√©ficiaire : ${ethers.formatEther(amountToPayee)} ETH`);
          console.log(`   Protocole : ${ethers.formatEther(protocolFee)} ETH`);
          console.log(`   Total : ${ethers.formatEther(totalLocked)} ETH`);
        } catch (e) {
          console.log(`‚ö†Ô∏è  Impossible de lire les montants (contrat V1 ?)`);
        }

        console.log(`\nüí∏ Ex√©cution de release()...`);
        
        const tx = await contract.release();
        console.log(`üì§ Transaction envoy√©e: ${tx.hash}`);
        
        const receipt = await tx.wait();
        console.log(`‚úÖ SUCC√àS ! Block: ${receipt.blockNumber}`);
        console.log(`üîó https://basescan.org/tx/${tx.hash}`);
        
        // Mettre √† jour le statut dans Supabase
        await updatePaymentStatus(payment.id, 'executed', tx.hash);
        
        console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`);

      } catch (error) {
        console.error(`‚ùå Erreur traitement paiement ${payment.id}:`, error.message);
        
        // Marquer comme √©chou√© si c'est une erreur critique
        if (error.message.includes("insufficient funds") || 
            error.message.includes("gas") ||
            error.message.includes("revert")) {
          await updatePaymentStatus(payment.id, 'failed');
        }
      }
    }
  } catch (error) {
    console.error("‚ùå Erreur g√©n√©rale:", error.message);
  }
}

// Health check
async function healthCheck() {
  try {
    const balance = await provider.getBalance(wallet.address);
    console.log(`üí∞ Balance keeper: ${ethers.formatEther(balance)} ETH`);
    
    if (balance === 0n) {
      console.warn("‚ö†Ô∏è  ATTENTION: Balance √† 0 !");
    }
    
    // Test de connexion API
    const response = await fetch(`${API_URL}/health`);
    if (response.ok) {
      console.log(`‚úÖ API connect√©e: ${API_URL}`);
    } else {
      console.warn(`‚ö†Ô∏è  API non accessible: ${API_URL}`);
    }
  } catch (error) {
    console.error("‚ùå Health check failed:", error.message);
  }
}

// D√©marrage
async function start() {
  console.log("üöÄ D√©marrage du Keeper V3...\n");
  
  // Health check initial
  await healthCheck();
  console.log();
  
  // Premi√®re v√©rification imm√©diate
  await checkAndRelease();
  
  // Puis v√©rifications p√©riodiques
  setInterval(checkAndRelease, CHECK_INTERVAL);
  
  // Health check toutes les 5 minutes
  setInterval(healthCheck, 5 * 60 * 1000);
  
  console.log("‚úÖ Keeper V3 op√©rationnel ! Surveillance Supabase active...\n");
}

// Gestion des erreurs
process.on("unhandledRejection", (error) => {
  console.error("‚ùå Unhandled rejection:", error);
});

process.on("SIGTERM", () => {
  console.log("‚ö†Ô∏è  SIGTERM re√ßu, arr√™t gracieux...");
  process.exit(0);
});

// Lancer !
start().catch(console.error);

